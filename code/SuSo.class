class SuSo {
  // internal
  
  string wrapperver="1.0"
  
  string initdate
  string inittime
  string versionstr
  
  string server
  string username
  string password
}

python:
import numbers
import time
import requests
from sfi import Macro, Data, Scalar, SFIToolkit


def checkurl(url):
  try:
    r = requests.get(url)
  except requests.ConnectionError as e:
    # Handle exception here
    Macro.setLocal("downloaded",str(-631))
    return -631
  return 0

def checkserver(server):
  try:
    r = requests.get(server + "/.hc")
    if (r.status_code==404):
      Macro.setLocal("downloaded",str(-10404))
      return -10404
  except requests.ConnectionError as e:
    # Handle exception here
    Macro.setLocal("downloaded",str(-631))
    return -631
  return 0
  
def checkapi(server,apiname,apipass):
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  print(server)
  try:
    y=requests.get(
      server+"/api/v1/settings/globalnotice/",
      headers=headers, 
      data={},
      auth=credentials)
    if (y.status_code!=200):
      return -y.status_code
    print(y.json()['Message'])
  except:
    return -1
  return 0
  
def check(server, apiname, apipass):
  c=checkurl(server)
  if (c < 0):
    return -1
  
  c=checkserver(server)
  if (c < 0):
    return -1
  
  c=checkapi(server,apiname,apipass)
  if (c < 0):
    if (c==-401):
      SFIToolkit.errprint("Server responded: 401 Unauthorized.")
      SFIToolkit.errprintln("Please check that the API user name and password are valid for this server.")
      return c
    return -1

  print("Server OK")
  return 0

def get_server():
    return SFIToolkit.macroExpand("`=char(96)'.server`=char(39)'")

def get_credentials():
    username=SFIToolkit.macroExpand("`=char(96)'.username`=char(39)'")
    password=SFIToolkit.macroExpand("`=char(96)'.password`=char(39)'")
    return (username,password)  

def export(server,apiname,apipass):
  # returns number of bytes in the saved file or a negative code if failed
  c=check(server, apiname, apipass)
  if (c < 0):
    Macro.setLocal("downloaded",str(c))
    return
  
  const_delay=0.2
  const_maxcycles=180

  qry=Macro.getLocal("qry")
  saveto=Macro.getLocal("saveto")
  URL=server+'/api/v2/export/'
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)

  x = requests.post(
    URL,
    data=qry,
    headers=headers,
    auth=credentials)
  
  if (x.ok):
    code=x.status_code
    jobid=x.json()['JobId']
    print('Set up new export job with ID:', jobid)
    y=requests.get(
      URL+str(jobid),
      headers=headers, 
      data={},
      auth=credentials)
    if (y.ok):
      c=1
      exportStatus=y.json()['ExportStatus']
      while((exportStatus!='Completed') and (c<const_maxcycles)):
        c=c+1
        print(exportStatus, y.json()['Progress'],"%")
        time.sleep(const_delay)
        y=requests.get(
          URL+str(jobid),
          headers=headers, 
          data={},
          auth=credentials)
        exportStatus=y.json()['ExportStatus']
    else:
      print("Something went wrong! Could not initiate a new data export job.")
      Macro.setLocal("downloaded",str(-1))
      return

    print(exportStatus, y.json()['Progress'],"%")
    if (not y.json()['HasExportFile']):
      print("Something went wrong! The data export job has been completed, but the export file was not produced by the server.")
      Macro.setLocal("downloaded",str(-1))
      return

    links=y.json()['Links']
    file=links['Download']

    # // temporary fix until the problem with download not ready is solved
    print("Downloading: "+file)
    c=1
    s=400
    while((s!=200) and (c<const_maxcycles)):
      filedata = requests.get(file, auth=credentials, allow_redirects=True)
      s=filedata.status_code
      print(c," ",s)
      c=c+1

    with open(saveto, 'wb') as file:
      file.write(filedata.content)
    Macro.setLocal("downloaded",str(len(filedata.content)))
  else:
    print(x.status_code)
    if (x.status_code==401):
      SFIToolkit.errprint("Server responded: 401 Unauthorized.")
      SFIToolkit.errprintln("Please check that the API user name and password are valid for this server.")
      Macro.setLocal("downloaded",str(-401))
      return
    if (x.status_code==404):
      SFIToolkit.errprint("Server responded: 404 Not found.")
      SFIToolkit.errprintln("Please check that the requested survey questionnaire was imported to this server.")
      Macro.setLocal("downloaded",str(-404))
      return
    Macro.setLocal("downloaded",str(-1))

def qx_doc(server, apiname, apipass, qguid, qversion):
  # // Returns the questionnaire document
  # // This is currently a JSON-formatted text document
 
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  
  URL=server+'/api/v1/questionnaires/'+qguid+"/"+str(qversion)+'/document'
  filedata=requests.get(
    URL,
    headers=headers, 
    data={},
    auth=credentials)
  print(filedata)
  saveto=Macro.getLocal("saveto")
  with open(saveto, 'wb') as file:
    file.write(filedata.content)
    
def qx_list(server, apiname, apipass):
  # returns the list of questionnaires in the current data area
  # in this query 'offset' is in fact a 'page number'
 
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  
  URL=server+'/api/v1/questionnaires/'
  y=requests.get(
    URL,
    headers=headers, 
    data={},
    auth=credentials)
  
  totalcount=y.json()["TotalCount"]
  print(totalcount, " questionnaires on the server")
  
  const_pagesize=40
  page=0
  while(const_pagesize*page<totalcount):
    page=page+1
    URL=server + '/api/v1/questionnaires/?limit=' +str(const_pagesize)+'&offset=' + str(page)
    print("Processing page: ", page)
    y=requests.get(
        URL,
        headers=headers, 
        data={},
        auth=credentials)
    # // print(y.status_code)   // need error processing here

    qxs=y.json()["Questionnaires"]
    for q in qxs:
        Data.addObs(1)
        n=Data.getObsTotal()-1
        Data.storeAt("qx_identity",n,q["QuestionnaireIdentity"])
        Data.storeAt("qx_id",n,q["QuestionnaireId"])
        Data.storeAt("qx_version",n,q["Version"])
        Data.storeAt("qx_title",n,q["Title"])
        Data.storeAt("qx_var",n,q["Variable"])
        Data.storeAt("qx_lastentry",n,q["LastEntryDate"])

def qx_interviews(server, apiname, apipass, qguid, qversion):
  # // Returns the list of questionnaires in the current data area
  # // In this query 'offset' is in fact a 'page number'
 
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  
  URL=server+'/api/v1/questionnaires/'+qguid+"/"+str(qversion)+"/interviews"
  y=requests.get(
    URL,
    headers=headers, 
    data={},
    auth=credentials)
  
  totalcount=y.json()["TotalCount"]
  print(totalcount, " interviews of this questionnaire on the server")

  const_pagesize=40
  page=0
  while(const_pagesize*page<totalcount):
    page=page+1
    URL=server+'/api/v1/questionnaires/'+qguid+"/"+str(qversion)+'/interviews?limit=' +str(const_pagesize)+'&offset=' + str(page)
    print("Processing page: ", page)
    y=requests.get(
        URL,
        headers=headers, 
        data={},
        auth=credentials)

    qxs=y.json()["Interviews"]
    for iview in qxs:
        Data.addObs(1)
        n=Data.getObsTotal()-1
        Data.storeAt("interview__id",             n,iview["InterviewId"])
        Data.storeAt("qx_guid",                   n,iview["QuestionnaireId"])
        Data.storeAt("qx_version",                n,iview["QuestionnaireVersion"])
        Data.storeAt("assignment_id",             n,iview["AssignmentId"])
        Data.storeAt("responsible_guid",          n,iview["ResponsibleId"])
        Data.storeAt("responsible_name",          n,iview["ResponsibleName"])
        Data.storeAt("errors_count",              n,iview["ErrorsCount"])
        Data.storeAt("status",                    n,iview["Status"])
        Data.storeAt("lastentry",                 n,iview["LastEntryDate"])
        Data.storeAt("received_by_device",        n,iview["ReceivedByDevice"])
        if (iview["ReceivedByDeviceAtUtc"]!=None):
          Data.storeAt("received_by_device_at_utc", n, iview["ReceivedByDeviceAtUtc"])

def notice_set(server, apiname, apipass, message):
  # // Sets global notice on the server
  content={"Message": message}
  headers = {'Content-type': 'application/json-patch+json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/settings/globalnotice'
  response=requests.put(
    URL, 
    headers=headers, 
    json=content,
    auth=credentials)

def notice_get(server, apiname, apipass):
  # // Retrieves global notice from the server
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/settings/globalnotice'
  response=requests.get(
    URL,
    headers=headers, 
    data={},
    auth=credentials)
    
  Macro.setLocal("message",response.json()["Message"])
  
def notice_delete(server, apiname, apipass):
  # // Delete global notice on the server
  headers = {'Content-type': 'application/json-patch+json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/settings/globalnotice'
  response=requests.delete(URL, headers=headers, auth=credentials)

def users_supervisors(server, apiname, apipass) :
  # // Get the list of supervisors
  
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/supervisors'
  response=requests.get(URL, headers=headers, data={}, auth=credentials)
  totalcount=response.json()["TotalCount"]
  print(totalcount, " supervisors on the server")

  const_pagesize=40
  page=0
  while(const_pagesize*page<totalcount):
    page=page+1
    URL=server + '/api/v1/supervisors/?limit=' +str(const_pagesize)+'&offset=' + str(page)
    print("Processing page: ", page)
    response=requests.get(URL, headers=headers, data={}, auth=credentials)
    for s in response.json()["Users"]:
        Data.addObs(1)
        n=Data.getObsTotal()-1
        Data.storeAt("user_name",    n,s["UserName"])
        Data.storeAt("user_id",      n,s["UserId"])
        Data.storeAt("creation_date",n,s["CreationDate"])
        Data.storeAt("is_locked",    n,s["IsLocked"])

        
def users_supervisor(server, apiname, apipass, guid) :
  # // Get details for a supervisor
  
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/supervisors/'+guid
  response=requests.get(URL, headers=headers, data={}, auth=credentials)
  r=response.json()
  
  Macro.setGlobal("r(UserName)", r["UserName"])
  Macro.setGlobal("r(FullName)", r["FullName"])
  Macro.setGlobal("r(Email)", r["Email"])
  Macro.setGlobal("r(PhoneNumber)", r["PhoneNumber"])
  Macro.setGlobal("r(CreationDate)", r["CreationDate"])
  a=0
  if r["IsArchived"]:
    a=1
    
  l=0
  if r["IsLocked"]:
    l=1
    
  Scalar.setValue("r(IsArchived)", a)
  Scalar.setValue("r(IsLocked)", l)

def users_interviewer(server, apiname, apipass, guid) :
  # // Get details for an interviewer
  
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/interviewers/'+guid
  response=requests.get(URL, headers=headers, data={}, auth=credentials)
  r=response.json()
  
  Macro.setGlobal("r(UserName)"    , r["UserName"])
  Macro.setGlobal("r(CreationDate)", r["CreationDate"])
  Macro.setGlobal("r(SupervisorName)",r["SupervisorName"])
  Macro.setGlobal("r(SupervisorId)", r["SupervisorId"])
  
  # // these are optional
  if "FullName" in r:
    Macro.setGlobal("r(FullName)"    , r["FullName"])
  
  if "Email" in r:
    Macro.setGlobal("r(Email)"       , r["Email"])
  
  if "PhoneNumber" in r:
    Macro.setGlobal("r(PhoneNumber)" , r["PhoneNumber"])
     
  a=0
  if r["IsArchived"]:
    a=1
    
  l=0
  if r["IsLocked"]:
    l=1
    
  ls=0
  if r["IsLockedBySupervisor"]:
    ls=1
  
  lh=0
  if r["IsLockedByHeadquarters"]: 
    lh=1
    
  Scalar.setValue("r(IsArchived)", a)
  Scalar.setValue("r(IsLocked)", l)
  Scalar.setValue("r(IsLockedBySupervisor)", ls)
  Scalar.setValue("r(IsLockedByHeadquarters)", lh)
  
def users_user(server, apiname, apipass, guid) :
  # // Get details for a user
  
  headers = {'Content-type': 'application/json'}
  credentials=(apiname,apipass)
  URL=server+'/api/v1/users/'+guid
  response=requests.get(URL, headers=headers, data={}, auth=credentials)
  r=response.json()
  
  Macro.setGlobal("r(UserName)"    , r["UserName"])
  Macro.setGlobal("r(CreationDate)", r["CreationDate"])
  Macro.setGlobal("r(UserId)", r["UserId"])
  Macro.setGlobal("r(Role)" , r["Roles"][0])
  
  # // these are optional
  if "FullName" in r:
    Macro.setGlobal("r(FullName)"    , r["FullName"])
  
  if "Email" in r:
    Macro.setGlobal("r(Email)"       , r["Email"])
  
  if "PhoneNumber" in r:
    Macro.setGlobal("r(PhoneNumber)" , r["PhoneNumber"])
  
  # // these are rare
  a=0
  if r["IsArchived"]:
    a=1
    
  l=0
  if r["IsLocked"]:
    l=1
    
  Scalar.setValue("r(IsArchived)", a)
  Scalar.setValue("r(IsLocked)", l)

def users_create(server, apiname, apipass):
  # // Creates a new user on the server
    qry=Macro.getLocal("qry")
    print(qry)

    headers = {'Content-type': 'application/json'}
    credentials=(apiname,apipass)
    URL=server+'/api/v1/users/'
    response=requests.post(
      URL, 
      headers=headers, 
      data=qry,
      auth=credentials)
    print(response)
    print(response.status_code)
    print(response.text)
    r=response.json()
    
    # // normal response=200 and new user ID is returned in the response
    # // {"UserId":"01277a045f5748beb61df6a196e3d06b","Errors":[]}
    
    # // if user exists: =  400
    # // {"UserId":null,"Errors":["Please choose another username"]}
    if (r["UserId"]!=None):
      Macro.setGlobal("r(UserID)", r["UserId"])
    if (r["Errors"]!=None):
      i=1
      for e in r["Errors"]:
        Macro.setGlobal("r(Error"+str(i)+ ")", e)

def users_archive(server, apiname, apipass, guid):
    # // Archives a user on the server
    headers = {'Content-type': 'application/json'}
    credentials=(apiname,apipass)
    URL=server+'/api/v1/users/'+guid+'/archive'
    response=requests.patch(
      URL, 
      headers=headers, 
      data={},
      auth=credentials)
    

def users_unarchive(server, apiname, apipass, guid):
    # // Unarchives a user on the server
    headers = {'Content-type': 'application/json'}
    credentials=(apiname,apipass)
    URL=server+'/api/v1/users/'+guid+'/unarchive'
    response=requests.patch(
      URL, 
      headers=headers, 
      data={},
      auth=credentials)
    
def users_interviewers(server, apiname, apipass, guid):
    # // Returns the list of interviewers in the team of a supervisor
    
    headers = {'Content-type': 'application/json'}
    credentials=(apiname,apipass)
    URL=server+'/api/v1/supervisors/'+guid+'/interviewers'
    response=requests.get(URL, headers=headers, data={}, auth=credentials)
    totalcount=response.json()["TotalCount"]
    print(totalcount, " interviewers in team of supervisor")
  
    const_pagesize=10
    page=0
    while(const_pagesize*page<totalcount):
      page=page+1
      URL=server + '/api/v1/supervisors/'+guid+'/interviewers?limit=' +str(const_pagesize)+'&offset=' + str(page)
      print("Processing page: ", page)
      response=requests.get(URL, headers=headers, data={}, auth=credentials)
      for s in response.json()["Users"]:
        Data.addObs(1)
        n=Data.getObsTotal()-1
        Data.storeAt("user_name",    n,s["UserName"])
        Data.storeAt("user_id",      n,s["UserId"])
        Data.storeAt("creation_date",n,s["CreationDate"])
        Data.storeAt("is_locked",    n,s["IsLocked"])

        
        
def users_actionslog(server, apiname, apipass, guid, datefrom, dateto):
    # // Returns the actions log of a particular interviewer
    # //from to!!!
    headers = {'Content-type': 'application/json'}
    credentials=(apiname,apipass)
    
    f=""
    if (datefrom!=""):
      f="start="+datefrom+"&end="+dateto
    
    URL=server+'/api/v1/interviewers/'+guid+'/actions-log?'+f
    
    print(URL)
    response=requests.get(URL, headers=headers, data={}, auth=credentials)
    # //totalcount=response.json()["TotalCount"]
    # //print(totalcount, " interviewers in team of supervisor")        
    print(response)
    print(response.json())
    for s in response.json():
        Data.addObs(1)
        n=Data.getObsTotal()-1
        Data.storeAt("time",    n,s["Time"])
        Data.storeAt("message", n,s["Message"])

def servepatch(URL):
    # // Serves a PATCH request
    headers = {'Content-type': 'application/json'}
    response=requests.patch(URL,headers=headers,data={},auth=get_credentials())
    print(response.status_code)
    return response
def servepatchdata(URL, content):
    # // Serves a PATCH request with data
    headers = {'Content-type': 'application/json-patch+json'}
    response=requests.patch(URL,headers=headers,json=content,auth=get_credentials())
    print(response.status_code)
    return response
def servepostdata(URL, content):
    # // Serves a POST request with data
    headers = {'Content-type': 'application/json-patch+json'}
    response=requests.post(URL,headers=headers,json=content,auth=get_credentials())
    print(response.status_code)
    return response
def serveget(URL):
    # // Serves a GET request
    headers = {'Content-type': 'application/json'}
    response=requests.get(URL,headers=headers,data={},auth=get_credentials())
    print(response.status_code)
    return response
def servedelete(URL):
    # // Serves a DELETE request
    headers = {'Content-type': 'application/json'}
    response=requests.delete(URL,headers=headers,data={},auth=get_credentials())
    print(response.status_code)
    return response

def interviews_approve(guid, comment):
    # // Approves interview
    URL=f'{get_server()}/api/v1/interviews/{guid}/approve?comment={requests.utils.quote(comment)}'
    response=servepatch(URL)

def interviews_reject(guid, comment, responsibleguid):
    # // Rejects interview
    URL=f'{get_server()}/api/v1/interviews/{guid}/reject?comment={requests.utils.quote(comment)}&responsibleId={responsibleguid}'
    response=servepatch(URL)

def interviews_hqunapprove(guid, comment):
    # // HQ-recalls interview from approved status
    URL=f'{get_server()}/api/v1/interviews/{guid}/hqunapprove?comment={requests.utils.quote(comment)}'
    response=servepatch(URL)

def interviews_approve(guid, comment):
    # // HQ-approves interview
    URL=f'{get_server()}/api/v1/interviews/{guid}/hqapprove?comment={requests.utils.quote(comment)}'
    response=servepatch(URL)
    
def interviews_hqreject(guid, comment, responsibleguid):
    # // HQ-rejects interview
    URL=f'{get_server()}/api/v1/interviews/{guid}/hqreject?comment={requests.utils.quote(comment)}&responsibleId={responsibleguid}'
    response=servepatch(URL)

def interviews_getpdf(guid):
    # // Get a transcript of interview in PDF
    URL=f'{get_server()}/api/v1/interviews/{guid}/pdf'
    response=serveget(URL)
    saveto=Macro.getLocal("saveto")
    with open(saveto, 'wb') as file:
      file.write(response.content)

def interviews_getstats(guid):
    # // Get a transcript of interview in PDF
    URL=f'{get_server()}/api/v1/interviews/{guid}/stats'
    response=serveget(URL)
    rsavejson(response.json())
    
def interviews_gethistory(guid):
    # // Get history of interview
    URL=f'{get_server()}/api/v1/interviews/{guid}/history'
    response=serveget(URL)
    for a in response.json()["Records"]:
      Data.addObs(1)
      n=Data.getObsTotal()-1
      if a["Timestamp"]!=None: 
        Data.storeAt("timestamp",       n, a["Timestamp"])
      if a["Offset"]!=None: 
        Data.storeAt("offset",          n, a["Offset"])
      if a["Action"]!=None: 
        Data.storeAt("action",          n, a["Action"])
      if a["OriginatorName"]!=None: 
        Data.storeAt("originator_name", n, a["OriginatorName"])
      if a["OriginatorRole"]!=None: 
        Data.storeAt("originator_role", n, a["OriginatorRole"])
      if a["Parameters"]!=None: 
        Data.storeAt("parameters",      n, str(a["Parameters"]))
        
def interviews_getanswers(guid):
    # // Get answers of interview
    URL=f'{get_server()}/api/v1/interviews/{guid}'
    response=serveget(URL)
    for a in response.json()["Answers"]:
      Data.addObs(1)
      n=Data.getObsTotal()-1
      if a["VariableName"]!=None: 
        Data.storeAt("variablename", n, a["VariableName"])

      qid=a["QuestionId"]

      if qid!=None:
        Data.storeAt("questionid",   n, qid["Id"])
        if qid["RosterVector"]!=None: 
          Data.storeAt("rostervector", n, str(qid["RosterVector"]))

      if a["Answer"]!=None: 
        Data.storeAt("answer",       n, a["Answer"])

def rsavejson(jsonobj):
    # // Saves JSON object to r()-results
    for (k, v) in jsonobj.items ():
      # print(k)
      # print(v)
      if (isinstance(v,str)):
        Macro.setGlobal(f"r({k})", v)
      else:
        if (isinstance(v, numbers.Number)):
          Scalar.setValue(f"r({k})", v)
        else:
          if (isinstance(v,bool)):
            if v:
              Scalar.setValue(f"r({k})", 1)
            else:
              Scalar.setValue(f"r({k})", 0)
        
def interviews_delete(guid):
  # // Delete an interview from the server
  headers = {'Content-type': 'application/json-patch+json'}
  URL=get_server()+"/api/v1/interviews/"+guid
  response=requests.delete(URL, headers=headers, auth=get_credentials())
  print(response.status_code)
  
  # // 406 for completed interviews ???
  
def interviews_assign(intguid, responsibleguid):
    # // Assigns interview to interviewer
    URL=f'{get_server()}/api/v1/interviews/{intguid}/assign'
    data={"ResponsibleId":responsibleguid}
    response=servepatchdata(URL,data)  

def interviews_assignsupervisor(intguid, responsibleguid):
    # // Assigns interview to supervisor
    URL=f'{get_server()}/api/v1/interviews/{intguid}/assignsupervisor'
    data={"ResponsibleId":responsibleguid}
    response=servepatchdata(URL,data)  

def interviews_comment(interviewguid, questionguid, comment):
    # // Add comment to question in interview
    URL=f'{get_server()}/api/v1/interviews/{interviewguid}/comment/{questionguid}?comment={requests.utils.quote(comment)}'
    response=servepostdata(URL, None)

def interviews_varcomment(interviewguid, varname, rosteraddress, comment):
    # // Add comment to question in interview
    URL=f'{get_server()}/api/v1/interviews/{interviewguid}/comment-by-variable/{varname}?{rosteraddress}comment={requests.utils.quote(comment)}'
    response=servepostdata(URL, None)
        

        
        
def assignments_close(assignmentid):
    response = requests.post(f'{get_server()}/api/v1/assignments/{assignmentid}/close', data={}, auth=get_credentials())
    print(response.status_code)
    # // todo: define error handling
    Macro.setScalar('r(status_code)', str(response.status_code))
    
def assignments_getquantitysettings(assignmentid):
    response = requests.get(f'{get_server()}/api/v1/assignments/{assignmentid}/assignmentQuantitySettings', data={}, auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)
    if (response.status_code==200):
      Scalar.setValue('r(can_change_quantity)',response.json()['CanChangeQuantity'])
    
def assignments_archive(assignmentid):
    response = requests.patch(f'{get_server()}/api/v1/assignments/{assignmentid}/archive', data={}, auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)

def assignments_unarchive(assignmentid):
    response = requests.patch(f'{get_server()}/api/v1/assignments/{assignmentid}/unarchive', data={}, auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)
    
def assignments_getaudio(assignmentid):
    response = requests.get(f'{get_server()}/api/v1/assignments/{assignmentid}/recordAudio', data={}, auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)
    if (response.ok):
      Scalar.setValue('r(record_audio)',response.json()['Enabled'])

def assignments_setaudio(assignmentid, audio):
    enabled=(audio!=0)
    URL=f'{get_server()}/api/v1/assignments/{assignmentid}/recordAudio'
    response = requests.patch(URL, json={'Enabled':enabled}, auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)
    
def assignments_changequantity(assignmentid, num):
    URL=f'{get_server()}/api/v1/assignments/{assignmentid}/changequantity'
    response=servepatchdata(URL,str(num))
    Scalar.setValue('r(status_code)', response.status_code)    
    

    
    
def assignments_history(assignmentid):
  # returns the history of the assignment in the current data area
 
  headers = {'Content-type': 'application/json'}
  credentials=get_credentials()
  
  URL=f'{get_server()}/api/v1/assignments/{assignmentid}/history'
  y=requests.get(
    URL,
    headers=headers, 
    data={},
    auth=credentials)
  
  totalcount=y.json()["RecordsFiltered"]
  print(totalcount, " events in the hostory of assignment ", assignmentid)
  
  const_pagesize=30
  page=0
  while(const_pagesize*page<totalcount):
    page=page+1
    URL=f'{get_server()}/api/v1/assignments/{assignmentid}/history?length={const_pagesize}&start={page}'
    print("Processing page: ", page)
    y=requests.get(
        URL,
        headers=headers, 
        data={},
        auth=credentials)
    
    items=y.json()["History"]
    for h in items:
        print(h)
        Data.addObs(1)
        n=Data.getObsTotal()-1
        if (h["Action"]!=None):
          Data.storeAt("action",n,h["Action"])
        if (h["ActorName"]!=None):
          Data.storeAt("actor_name",n,h["ActorName"])
        if (h["UtcDate"]!=None):
          Data.storeAt("utc_date",n,h["UtcDate"])
        if (h["AdditionalData"]!=None):
          Data.storeAt("additional_data",n,str(h["AdditionalData"]))
   
def assignments_setresponsible(assignmentid, responsibleLogin):
    URL=f'{get_server()}/api/v1/assignments/{assignmentid}/assign'
    response = requests.patch(
      URL, 
      json={'Responsible':responsibleLogin}, 
      auth=get_credentials())
    Scalar.setValue('r(status_code)', response.status_code)
   
def assignments_getdetails(assignmentid):
    # // Get assignment details
    URL=f'{get_server()}/api/v1/assignments/{assignmentid}'
    response=serveget(URL)
    r=response.json()
    rsavejson(r)
    identif=r["IdentifyingData"]

    # // Answers to all question types are stored as strings
    c=1
    for x in identif:
      Macro.setGlobal(f"r(id_guid{c})", x["Identity"])
      Macro.setGlobal(f"r(id_variable{c})", x["Variable"])
      Macro.setGlobal(f"r(id_answer{c})", x["Answer"])
      c=c+1
    Macro.setGlobal(f"r(id_count)", str(c-1))
    
    # // NB: Answers to preloaded questions that are 
    # // not identifying are not returned !!
           
        
        
        
        
        
        
        
        
        
        
        
        
end





// =============================================================================


program define .new
    
    .inittime=`"`c(current_time)'"'
    .initdate=`"`c(current_date)'"'
    
    if (`"`inittime'"'!=`"`c(current_time)'"') {
      .inittime=`"`c(current_time)'"'
      .initdate=`"`c(current_date)'"'
    }    
    
    if `"`0'"' != "" {
        .set `0'
    }
    
    // Get the server version (not from API)
    tempfile tmp
    copy `"`.server'/.version"' `"`tmp'"'
    .versionstr=fileread(`"`tmp'"')
    erase `"`tmp'"'

    // display greeting
    display as text "{break}"    
    display as text `"Survey Solutions API wrapper for Stata version `.wrapperver' {stata "adoupdate susoapi":(check for updates)}"'
    display as result `"Running in "'
    display as result `"- Stata `c(version)' `c(os)' `c(osdtl)'"'
    display as result `"- Python "' _continue
    python : import sys ; print(sys.version)

    display as text "{break}"
    display as text `"Survey Solutions data server"'
    display as text `"{browse "`.server'":`.server'}"'
    display as text `"`.versionstr'"'

    // Now check the server for responding
    python: Macro.setLocal("c",str(check("`.server'", "`.username'", "`.password'")))
    if (`c' < 0) exit 3333
    
    display as text "{break}"
    display as text "Here are just some things you could do:"
    display as text `"- {stata ".`.objkey'.qx_list":get list of all questionnaires}"'
    display as text `"- {stata ".`.objkey'.users_supervisors":get list of all supervisors}"'
    
    display as text "{break}"
    display as text "Additional information:"
    display as text `"- Survey Solutions {browse "`.server'/apidocs/":API documentation}"'
    display as text `"- Survey Solutions {browse "https://support.mysurvey.solutions":support site}"'
    display as text `"- Source code of this application at {browse "https://github.com/radyakin/susoapi":github}"'
    
end

program .set
    args server username password
    .server   = "`server'"
    .username = "`username'"
    .password = "`password'"
end

program define .qx_document
    version 16.0
    syntax , qguid(string) qversion(integer) ///
             saveto(string) [replace]
    capture confirm new file `"`saveto'"'
    if (_rc & `"`replace'"'=="") {
        error 602
    }
    python : qx_doc("`.server'", "`.username'", "`.password'", "`qguid'", `qversion')
end


program .qx_list
    version 16.0
    syntax , [frame(string)]
  
    if (`"`frame'"'=="") clear
    else {
      frame create `frame'
      frame change `frame'
    }
    generate str40 qx_identity=""
    generate str32 qx_id=""
    generate long  qx_version=.
    generate strL  qx_title=""
    generate str32 qx_var=""
    generate strL  qx_lastentry=""  

    python : qx_list("`.server'","`.username'","`.password'")
end

program define qx_interviews
    version 16.0
    syntax , qguid(string) qversion(integer) [frame(string)]

    if (`"`frame'"'=="") clear
    else {
        frame create `frame'
        frame change `frame'
    }

    generate str36 interview__id=""
    generate str36 qx_guid=""
    generate long qx_version=.
    generate long assignment_id=.
    generate str36 responsible_guid=""
    generate str36 responsible_name=""
    generate long errors_count=.
    generate str36 status=""
    generate strL lastentry=""
    generate byte received_by_device=.
    generate strL received_by_device_at_utc=""

    python : qx_interviews("`.server'","`.username'","`.password'", "`qguid'", `qversion')

end

program .qx_setaudio
    version 16.0
    args qguid qversion value
    susoapi_qx_setaudio, ///
      server("`.server'") apiname("`.username'") apipass("`.password'") ///
      qguid("`qguid'") qversion(`qversion') ///
      value(`value')
end

program .notice_set
    version 16.0
    args message
    python: notice_set("`.server'","`.username'","`.password'", "`message'")
end

program .notice_get
    version 16.0
    python: notice_get("`.server'","`.username'","`.password'")
    class exit `"`message'"'
end

program .notice_delete
    version 16.0
    python: notice_delete("`.server'","`.username'","`.password'")
end

program .users_supervisors
    version 16.0
    args framename
    if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    generate strL user_name=""
    generate str36 user_id=""
    generate str40 creation_date=""
    generate is_locked=.
    python: users_supervisors("`.server'","`.username'","`.password'")
end

program .users_supervisor
    version 16.0
    args guid
    python: users_supervisor("`.server'","`.username'","`.password'","`guid'")
end

program .users_interviewer
    version 16.0
    args guid
    python: users_interviewer("`.server'","`.username'","`.password'","`guid'")
end

program .users_user
    version 16.0
    args guid
    python: users_user("`.server'","`.username'","`.password'","`guid'")
end

program .users_create
    version 16.0
    syntax , role(string) username(string) password(string) ///
             [supervisor(string)] ///
             [fullname(string) phonenumber(string) email(string)]
             
    local role2=strlower(`"`role'"')
    if !inlist(`"`role2'"',"interviewer","supervisor","headquarters") {
      display as error "Error! Users may be created only in the following roles: interviewer, supervisor, headquarters. The role `role' is not valid."
      error 197
    }
    
    if (`"`role2'"'=="interviewer") {
      if (missing(`"`supervisor'"')) {
        display as error "Error! A supervisor must be specified for any new interviewer account!"
        error 198
      }
    }
    
    local mailcontact ""
    if (!missing(`"`email'"')) {
      local mailcontact `", "Email":"`email'""'
    }
    
    local qry `"{ "Role": "`role'", "UserName": "`username'", "FullName": "`fullname'","PhoneNumber": "`phonenumber'"`mailcontact',"Password": "`password'","Supervisor": "`supervisor'" }"'
    display `"`qry'"'
    
    python: users_create("`.server'","`.username'","`.password'")
    if missing(r(UserID)) {
        display as error "Error! User was not created"
        error 196
    }
end

program .users_archive
    version 16.0
    args guid
    python: users_archive("`.server'","`.username'","`.password'","`guid'")
end

program .users_unarchive
    version 16.0
    args guid
    python: users_unarchive("`.server'","`.username'","`.password'","`guid'")
end

program .users_interviewers
    version 16.0
    args guid framename
    if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    generate strL user_name=""
    generate str36 user_id=""
    generate str40 creation_date=""
    generate is_locked=.
    
    python: users_interviewers("`.server'","`.username'","`.password'","`guid'")
end

program .users_actionslog
    version 16.0
    syntax , user(string) [framename(string)] from(string) to(string)
    if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    
    generate str40 time=""
    generate strL message=""
    
    local froms=subinstr(`"`from'"',"T"," ",.)
    local tos=subinstr(`"`to'"',"T"," ",.)
    local froms=subinstr(`"`froms'"',"Z","",.)
    local tos=subinstr(`"`tos'"',"Z","",.)
    note: "Detailed actions log of user `user' from `froms' to `tos'"    
    
    local from=subinstr(`"`from'"',":","%3A",.)
    local to=subinstr(`"`to'"',":","%3A",.)
    
    python: users_actionslog("`.server'","`.username'","`.password'","`user'", "`from'", "`to'")
    
end

program define export2
  version 16.0
  syntax , qid(string) ///
           saveto(string) [replace] ///
           [ translationid(string) includemeta ///
           status(string) exporttype(string) ///
           from(string) to(string) ]

           // # timestamp is expected in the following format:
           // # "2021-01-02T19:23:43.375Z"

  capture confirm new file `"`saveto'"'
  if _rc {
    // check if can delete the existing file
    if (`"`replace'"'!="") {
      erase `"`saveto'"'
      capture noisily confirm new file `"`saveto'"'
    }
    if (_rc) {
      display as error "Error! Cannot save to `saveto' !"
      error 691
    }
  }
  
  if (`"`.server'"'=="") {
    display as error "Error! Server name may not be empty!"
    error 101
  }

  if (`"`qid'"'=="") {
    display as error "Error! Questionnaire identity may not be empty!"
    error 101
  }

  local t=strpos(`"`macval(qid)'"',`"`=char(36)'"')

  if (`t'==0 | `t'==strlen(`"`macval(qid)'"')) {
    display as error "Error! Questionnaire identity must include the version!"
    error 101
  }

  if (`"`translationid'"'=="") {
    display as result ///
    "Warning! Translation ID not specified.{break}Downloading in the default language!"
  }

  local includemeta=cond(`"`includemeta'"'=="","false","true") 

  if missing(`"`status'"') local status="All"
  if (!inlist(`"`status'"', ///
    "All", "InterviewerAssigned", "Completed", ///
    "ApprovedBySupervisor", "ApprovedByHeadquarters")) {
    display as error `"Error! Invalid filter by status: `status'"'
    error 101
  }

  if missing(`"`exporttype'"') local exporttype="STATA"
  if (!inlist(`"`exporttype'"', ///
    "Tabular", "STATA", "SPSS", "Binary", "DDI", "Paradata")) {
    display as error `"Error! Invalid data export type: `exporttype'"'
    error 101
  }
  
  if (`"`includemeta'"'=="true" & inlist("`exporttype'", "Binary", "DDI", "Paradata")) {
    display as error `"Error! Questionnaire metadata is not available in this format: `exporttype'"'
    error 198
  }
  
  if ((missing(`"`from'"') & !missing(`"`to'"')) | ///
     (!missing(`"`from'"') & missing(`"`to'"'))) {
    display as error ///
    `"Error! Either both or none of the options from() and to() must be specified!"'
    error 198
  }
  else {
    local datefilter=`", "From": "`from'", "To": "`to'" "'
    // # must start with a comma, must not end with a comma
  }

  local qry = `" { "ExportType": "`exporttype'", "QuestionnaireId": "`qid'", "TranslationId": "`translationid'", "InterviewStatus": "`status'" `datefilter', "IncludeMeta":"`includemeta'" } "'
  
  local downloaded=0
  
  capture noisily python : export("`.server'","`.username'","`.password'")
  
  if (_rc==7102) {
    display as error ///
    `"Error! Could not place an export job. Most likely incorrect address of the server: `.server'"'
    error 601
  }
  
  if (`downloaded'==22) {
    display as result "Warning! Empty downloaded an empty file."
  }
  
  if (`downloaded'==-401) {
    error 673
  }
  
  if (`downloaded'==-631) {
    error 631
  }
  
  if (`downloaded'==-10404) {
    display as error "Not a Survey Solutions server!"
    error 601
  }
  
  if (`downloaded'<0) {
    display as error "Error! Could not export data!"
    error 601
  }
  
  display as text `"file `saveto' saved (`=string(`downloaded',"%20.0gc")' bytes)"'
end


program define .interviews_approve
    version 16.0
    args guid comment
    python: interviews_approve("`guid'", "`comment'")
end

program define .interviews_reject
    version 16.0
    args guid comment responsible
    python: interviews_reject("`guid'", "`comment'","`responsible'")
end

program define .interviews_hqunapprove
    version 16.0
    args guid comment
    python: interviews_reject("`guid'", "`comment'")
end

program define .interviews_hqapprove
    version 16.0
    args guid comment
    python: interviews_hqapprove("`guid'", "`comment'")
end

program define .interviews_hqreject
    version 16.0
    args guid comment responsible
    python: interviews_hqreject("`guid'", "`comment'","`responsible'")
end

program define .interviews_getpdf
    version 16.0
    args guid saveto
    python: interviews_getpdf("`guid'")
end

program define .interviews_getstats
    version 16.0
    args guid
    python: interviews_getstats("`guid'")
end

program define .interviews_gethistory
    version 16.0
    args guid framename
     if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    
    generate str40 timestamp=""
    generate str20 offset=""
    generate str40 action=""
    generate str40 originator_name=""
    generate str40 originator_role=""
    generate strL parameters=""
    
    python: interviews_gethistory("`guid'")
    compress
end

program define .interviews_getanswers
    version 16.0
    args guid framename
     if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    
    generate str32 variablename=""
    generate str40 questionid  =""
    generate strL  rostervector=""
    generate strL  answer      =""
    
    python: interviews_getanswers("`guid'")
    compress
end

program define .interviews_delete
    version 16.0
    args guid
    python: interviews_delete("`guid'")
end

program define .interviews_assign
    // by responsible GUID only
    version 16.0
    args intguid responsibleguid
    python: interviews_assign("`intguid'","`responsibleguid'")
end

program define .interviews_assignsupervisor
    // by responsible GUID only
    version 16.0
    args intguid responsibleguid
    python: interviews_assignsupervisor("`intguid'","`responsibleguid'")
end

program define .interviews_comment
    // Add comment to a particular question
    version 16.0
    syntax, interviewguid(string) questionguid(string) ///
            comment(string) [rostervector(string)]
    local questionguid=subinstr(`"`questionguid'"',"-","",.) + "_`rostervector'"
    // rostervector (if specified) is expected to be formatted 
    // according to the Survey Solutions rules:
    // specifically as #, or #-#, or #-#-#, or #-#-#-#
    // todo: add validation here
    python: interviews_comment("`interviewguid'", "`questionguid'", "`comment'")
end

program define .rostervectoraddress, rclass
  // Converts a RosterVectorAddress written in 
  // the Survey Solutions convention into a 
  // fragment of an URL query.
  version 16.0
  args rva
  if missing(`"`rva'"') exit
  local word "rosterVector"
  local rva=subinstr(`"`rva'"',"-","&`word'=",.)
  local rva=subinstr(`"`word'=`rva'"',"`word'=&`word'=","`word'=-",.)
  return local result `"`rva'&"'
end

program define .interviews_varcomment
    version 16.0
    syntax, interviewguid(string) varname(string) ///
            comment(string) [rostervector(string)]
    // Add comment to a particular question
    .rostervectoraddress `rostervector'
    local rva=r(result)
    python: interviews_varcomment("`interviewguid'", "`varname'", "`rva'", "`comment'")
     // Undocumented server response 406 if rosterVector is misspecified
end

program define .assignments_close
    // Closes an existing assignment by assignment ID
    version 16.0
    args assignmentid
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    python: assignments_close(`assignmentid')
end

program define .assignments_getquantitysettings
    // Returns of the quantity of an assignment may be changed
    version 16.0
    args assignmentid
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    python: assignments_getquantitysettings(`assignmentid')
end

program define .assignments_archive
    // Archives an assignment by assignment ID
    version 16.0
    args assignmentid
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    python: assignments_archive(`assignmentid')
end

program define .assignments_unarchive
    // Unarchives an assignment by assignment ID
    version 16.0
    args assignmentid
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    python: assignments_unarchive(`assignmentid')
end

program define .assignments_getaudio
    // Returns returns the status of audio recording of an assignment by assignment ID
    version 16.0
    args assignmentid
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    python: assignments_getaudio(`assignmentid')
end


program define .assignments_setaudio
    // # Returns the status of audio recording of an assignment by assignment ID
    version 16.0
    args assignmentid audio
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    if (missing(`"`audio'"')) {
        display as error "Error! Value (numeric) for audio audit is required. Use 1 for enabled, 0 for disabled."
        exit 5002
    }
    local audio=(`audio'!=0)
    python: assignments_setaudio(`assignmentid', `audio')
end

program define .assignments_changequantity
    // # Tries to set the quantity in an assignment by assignment ID
    version 16.0
    args assignmentid num
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    if (missing(`"`num'"')) {
        display as error "Error! Must specify a new number of interviews in an assignment."
        exit 5002
    }
    
    python: assignments_changequantity(`assignmentid', `num')
end



program define .assignments_history
    // Returns the history of an assignment in the data area
    version 16.0
    args assignmentid frame
    
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    if !missing(`"`framename'"') {
      frame create `framename'
      frame change `framename'
    }
    clear
    
    generate str32 utc_date        =""
    generate str32 action          =""
    generate str32 actor_name      =""
    generate strL  additional_data =""
    
    python: assignments_history("`assignmentid'")
    compress
end

program define .assignments_assign
    // # Assign new responsible for an assignment identified by assignment ID and responsible identified by login name.
    version 16.0
    args assignmentid responsiblelogin
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    
    if (missing(`"`responsiblelogin'"')) {
        display as error "Error! Responsible person's login name couldn't be specified at the moment."
        exit 5002
    }

    python: assignments_setresponsible(`assignmentid', "`responsiblelogin'")
end

program define .assignments_getdetails
    // # Returns assignment details
    version 16.0
    args assignmentid responsiblelogin
    if (missing(`"`assignmentid'"')) {
        display as error "Error! Assignment ID (numeric) is required."
        exit 5001
    }
    python: assignments_getdetails(`assignmentid')
end

program define .pick_value
    // Picks one identifying variable value by name from results saved in r()
    version 16.0
    args vn
    
    local n=r(id_count)
    local i=1
    while `i'<=`n' {
        if (`"`r(id_variable`i')'"'==`"`vn'"') {
            class exit `"`r(id_answer`i')'"'
        }
        local i=`i'+1
    }
    class exit ""
end
// END OF FILE
